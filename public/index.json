[{"authors":null,"categories":null,"content":"Victor Mandela is a data scientist at CSV research solutions company, his major roles are to integrate machine learning principles into software and development of shiny applications. He is passionate about getting insights from data with deep experience in the development of market based solutions seeking to solve the toughest social and development issues facing bottom of the pyramid communities in frontier markets all over the world.\nWhat motivates him is the sea of knowledge that when learned can reduce the amount of time we spend to solve problems. His major technologies are SQL, R-Studio and Shiny Apps. He also uses advanced excel, python, docker, and AWS when collaborating with team members.\n Download my resumé.\r--\r","date":1554595200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1554595200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Victor Mandela is a data scientist at CSV research solutions company, his major roles are to integrate machine learning principles into software and development of shiny applications. He is passionate about getting insights from data with deep experience in the development of market based solutions seeking to solve the toughest social and development issues facing bottom of the pyramid communities in frontier markets all over the world.","tags":null,"title":"Victor Mandela","type":"authors"},{"authors":null,"categories":null,"content":"Victor Mandela is a data scientist at xetova software company, his major roles are to intergrate machine learning principles into software and development of shiny applications. He is passionate about getting insights from data with deep experience in the development of market based solutions seeking to solve the toughest social and development issues facing bottom of the pyramid communities in frontier markets all over the world.\nWhat motivates him is the sea of knowledge that when learned can reduce the amount of time we spend to solve problems. His major technologies are SQL, R-Studio and Shiny Apps. He also uses advaned excel, python, docker, and AWS when collaborating with team members.\n\r Download my resumé.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"bb560906b6a99893cc21387348c0b074","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Victor Mandela is a data scientist at xetova software company, his major roles are to intergrate machine learning principles into software and development of shiny applications. He is passionate about getting insights from data with deep experience in the development of market based solutions seeking to solve the toughest social and development issues facing bottom of the pyramid communities in frontier markets all over the world.","tags":null,"title":"Victor Mandela","type":"authors"},{"authors":[],"categories":null,"content":"\rClick on the Slides button above to view the built-in slides feature.\r\r\rSlides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://victormandela.netlify.app/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":[],"categories":["R"],"content":"OutPuts in ShinyApps Outputs are build in shinyApps based on inputs. We use render functiond to create a variety of outputs ranging from plots renderPlot, tables renderTable and images renderImage.\nAdd a table output  In order to add any output to a Shiny app, you need to:\n Create the output (plot, table, text, etc.). Render the output object using the appropriate *render___* function. Assign the rendered object to output$x. Add the output to the UI using the appropriate ___Output function. In this example, you will add a table output to the baby names explorer app you created earlier. Don\u0026rsquo;t forget that code inside a render___ function needs to be wrapped inside curly braces (e.g. renderPlot({\u0026hellip;})).  ui \u0026lt;- fluidPage(\rtitlePanel(\u0026quot;What's in a Name?\u0026quot;),\r# Add select input named \u0026quot;sex\u0026quot; to choose between \u0026quot;M\u0026quot; and \u0026quot;F\u0026quot;\rselectInput('sex', 'Select Sex', choices = c(\u0026quot;F\u0026quot;, \u0026quot;M\u0026quot;)),\r# Add slider input named \u0026quot;year\u0026quot; to select year between 1900 and 2010\rsliderInput('year', 'Select Year', min = 1900, max = 2010, value = 1900),\r# CODE BELOW: Add table output named \u0026quot;table_top_10_names\u0026quot;\rtableOutput (\u0026quot;table_top_10_names\u0026quot;)\r)\rserver \u0026lt;- function(input, output, session){\r# Function to create a data frame of top 10 names by sex and year top_10_names \u0026lt;- function(){\rtop_10_names \u0026lt;- babynames %\u0026gt;% filter(sex == input$sex) %\u0026gt;% filter(year == input$year) %\u0026gt;% top_n(10, prop)\r}\r# CODE BELOW: Render a table output named \u0026quot;table_top_10_names\u0026quot;\routput$table_top_10_names \u0026lt;- renderTable ({\rtop_10_names()\r})\r}\rshinyApp(ui = ui, server = server)\r Add an interactive table output  There are multiple htmlwidgets packages like DT, leaflet, plotly, etc. that provide highly interactive outputs and can be easily integrated into Shiny apps using almost the same pattern. For example, you can turn a static table in a Shiny app into an interactive table using the DT package:\n Create an interactive table using DT::datatable(). Render it using DT::renderDT(). Display it using DT::DTOutput(). In this example, you will update the app created previously, replacing the static table with an interactive table.  ui \u0026lt;- fluidPage(\rtitlePanel(\u0026quot;What's in a Name?\u0026quot;),\r# Add select input named \u0026quot;sex\u0026quot; to choose between \u0026quot;M\u0026quot; and \u0026quot;F\u0026quot;\rselectInput('sex', 'Select Sex', choices = c(\u0026quot;M\u0026quot;, \u0026quot;F\u0026quot;)),\r# Add slider input named \u0026quot;year\u0026quot; to select year between 1900 and 2010\rsliderInput('year', 'Select Year', min = 1900, max = 2010, value = 1900),\r# MODIFY CODE BELOW: Add a DT output named \u0026quot;table_top_10_names\u0026quot;\rDT::DTOutput('table_top_10_names')\r)\rserver \u0026lt;- function(input, output, session){\rtop_10_names \u0026lt;- function(){\rbabynames %\u0026gt;% filter(sex == input$sex) %\u0026gt;% filter(year == input$year) %\u0026gt;% top_n(10, prop)\r}\r# MODIFY CODE BELOW: Render a DT output named \u0026quot;table_top_10_names\u0026quot;\routput$table_top_10_names \u0026lt;- DT::renderDT({\rtop_10_names() %\u0026gt;%\rDT::datatable()\r})\r}\rshinyApp(ui = ui, server = server)\r Add interactive plot output  Similar to creating interactive tables, you can easily turn a static plot created using ggplot2 into an interactive plot using the plotly package. To render an interactive plot, use plotly::renderPlotly(), and display it using plotly::plotlyOutput().\nRemember that just like with other render functions, the code inside plotly::renderPlotly() should be wrapped in curly braces {}!\nCheck out the next illustrations\nui \u0026lt;- fluidPage(\rselectInput('name', 'Select Name', top_trendy_names$name),\r# CODE BELOW: Add a plotly output named 'plot_trendy_names'\rplotly::plotlyOutput(\u0026quot;plot_trendy_names\u0026quot;)\r)\rserver \u0026lt;- function(input, output, session){\r# Function to plot trends in a name\rplot_trends \u0026lt;- function(){\rbabynames %\u0026gt;% filter(name == input$name) %\u0026gt;% ggplot(aes(x = year, y = n)) +\rgeom_col()\r}\r# CODE BELOW: Render a plotly output named 'plot_trendy_names'\routput$plot_trendy_names \u0026lt;- plotly::renderPlotly({\rplot_trends()\r})\r}\rshinyApp(ui = ui, server = server)\r Benefits of an interactive plot Try interacting with the plot. You can zoom in on certain areas, zoom back out, and hover over the bars to see the values. This makes plots in your app far more interesting, and allows users to gain insights without having to see any code or data.\n","date":1613433600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613483131,"objectID":"55b3e7d3aecb90d59bc0b187b0c1ef0b","permalink":"https://victormandela.netlify.app/post/buiding-shinyapps3-outputs/","publishdate":"2021-02-16T00:00:00Z","relpermalink":"/post/buiding-shinyapps3-outputs/","section":"post","summary":"OutPuts in ShinyApps Outputs are build in shinyApps based on inputs. We use render functiond to create a variety of outputs ranging from plots renderPlot, tables renderTable and images renderImage.","tags":["Dashboards","Shiny Apps"],"title":"Buiding shinyApps3: Outputs","type":"post"},{"authors":[],"categories":["R"],"content":"","date":1613433600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613486560,"objectID":"b5ddd653643313515f3bb9239adb53df","permalink":"https://victormandela.netlify.app/post/building-shinapp4-layouts-and-themes/","publishdate":"2021-02-16T00:00:00Z","relpermalink":"/post/building-shinapp4-layouts-and-themes/","section":"post","summary":"","tags":["Shiny Apps","Academic"],"title":"building shinApp4: Layouts and themes","type":"post"},{"authors":[],"categories":["R"],"content":"INPUTS Shiny provides a wide variety of inputs that allows users to provide text (textInput, selectInput), numbers (numericInput, sliderInput), booleans (checkBoxInput, radioInput), and dates (dateInput, dateRangeInput).\nFor example:-\nTo select a range a name from a predifined range of choice we use - the selectInput.\nselectInput(\u0026quot;InputID\u0026quot;,\r\u0026quot;Label\u0026quot;,\rchoices = c(\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;))\r To choose a range of values to filter weight we can use the sliderInput.\nsliderInput(\u0026quot;InputID\u0026quot;,\r\u0026quot;Label\u0026quot;,\rvalue = 1925,\rmax = 2021,\rmin =1900,)\r To select three phones to compare from a set of 10 options we can use the checkBoxInput\nNoTE - It\u0026rsquo;s helpful to visualize what you want your input to look like first, then choose the corresponding Shiny input. It is better to draw a Sketch first.\nAdd a select input  Adding an input to a shiny app is a two step process, where you first add an ___Input(“x”) function to the UI and then access its value in the server using input$x.\nFor example, if you want users to choose an animal from a list, you can use a selectInput, and refer to the chosen value as input$animal:\nselectInput(\r'animal', 'Select Animal', selected = 'Cat', choices = c('Dog', 'Cat')\r)\r In this example, you will build a Shiny app that lets users visualize the top 10 most popular names by sex by adding an input to let them choose the sex.\nui \u0026lt;- fluidPage(\rtitlePanel(\u0026quot;What's in a Name?\u0026quot;),\r# CODE BELOW: Add select input named \u0026quot;sex\u0026quot; to choose between \u0026quot;M\u0026quot; and \u0026quot;F\u0026quot;\rselectInput(\u0026quot;sex\u0026quot;, \u0026quot;What is your gender?\u0026quot;, \u0026quot;F\u0026quot;, choices = c(\u0026quot;M\u0026quot;, \u0026quot;F\u0026quot;)),\r# Add plot output to display top 10 most popular names\rplotOutput('plot_top_10_names')\r)\rserver \u0026lt;- function(input, output, session){\r# Render plot of top 10 most popular names\routput$plot_top_10_names \u0026lt;- renderPlot({\r# Get top 10 names by sex and year\rtop_10_names \u0026lt;- babynames %\u0026gt;% # MODIFY CODE BELOW: Filter for the selected sex\rfilter(sex == input$sex) %\u0026gt;% filter(year == 1900) %\u0026gt;% top_n(10, prop)\r# Plot top 10 names by sex and year\rggplot(top_10_names, aes(x = name, y = prop)) +\rgeom_col(fill = \u0026quot;#263e63\u0026quot;)\r})\r}\rshinyApp(ui = ui, server = server)\r Slider Input  We can add a sliderInput for year to select the range of between 1900 to 2010, with a default of 1920 by adding the following code.\nui \u0026lt;- fluidPage(\rtitlePanel(\u0026quot;What's in a Name?\u0026quot;),\r# Add select input named \u0026quot;sex\u0026quot; to choose between \u0026quot;M\u0026quot; and \u0026quot;F\u0026quot;\rselectInput('sex', 'Select Sex', choices = c(\u0026quot;F\u0026quot;, \u0026quot;M\u0026quot;)),\r# CODE BELOW: Add slider input named 'year' to select years (1900 - 2010)\rsliderInput(\u0026quot;year\u0026quot;, \u0026quot;choose year\u0026quot;, value = 1900, min = 1900, max = 2010),\r# Add plot output to display top 10 most popular names\rplotOutput('plot_top_10_names')\r)\rserver \u0026lt;- function(input, output, session){\r# Render plot of top 10 most popular names\routput$plot_top_10_names \u0026lt;- renderPlot({\r# Get top 10 names by sex and year\rtop_10_names \u0026lt;- babynames %\u0026gt;% filter(sex == input$sex) %\u0026gt;% # MODIFY CODE BELOW: Filter for the selected year\rfilter(year == input$year) %\u0026gt;% top_n(10, prop)\r# Plot top 10 names by sex and year\rggplot(top_10_names, aes(x = name, y = prop)) +\rgeom_col(fill = \u0026quot;#263e63\u0026quot;)\r})\r}\rshinyApp(ui = ui, server = server)\r ","date":1613433600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613479888,"objectID":"6493f9c2c21f7e986b624703de8b2806","permalink":"https://victormandela.netlify.app/post/building-shinyapp2-inputs-outputs-and-layouts/","publishdate":"2021-02-16T00:00:00Z","relpermalink":"/post/building-shinyapp2-inputs-outputs-and-layouts/","section":"post","summary":"INPUTS Shiny provides a wide variety of inputs that allows users to provide text (textInput, selectInput), numbers (numericInput, sliderInput), booleans (checkBoxInput, radioInput), and dates (dateInput, dateRangeInput).\nFor example:-\nTo select a range a name from a predifined range of choice we use - the selectInput.","tags":["Shiny Apps","Dashboards"],"title":"Building shinyApp2: Inputs options ","type":"post"},{"authors":[],"categories":"R","content":"Building a \u0026ldquo;Hello world shinyApp\u0026rdquo; We begin to demonstrate the building blocks of a shinyApp.\nAn App needs a User interface (ui) and a server. The majic about the shiny package is that it can create both of this within R, plus run your app using an additionational shiny function.\nFirst,\n load the library using the shiny.  library(shiny)\r Create ui using the html function  ui \u0026lt;- fluidPage()\r Define a custom function to create the server  server \u0026lt;- function(input,\routput,\rsession){\r}\r finally run your app.  shinyApp(ui = ui, server = server)\r Example1 of shiny app library(shiny)\rlibrary(widgetframe)\rui \u0026lt;- fluidPage(\r\u0026quot;Hello, world!!!!!!\u0026quot;\r)\rserver \u0026lt;- function(input,\routput,\rsession){\r}\rshinyApp(ui = ui, server = server)\r Example2: Add a question We want to go an extra mile an add a text that asks a question. This is possible but adding textinput functuion that allows us to enter text. It has three arguments, a unique ID that will be used to refer to this input, a label that is displayed to the user and an optional default value.\nOur full out put that is diplayed is contained in the server using the render text function. Inside of that you can use paste to create a longer character string. And if add input$name you can access the name added using text input. The text is assigned to an output object that will be used in the ui to display.\nlibrary(shiny)\rlibrary(widgetframe)\rui \u0026lt;- fluidPage(\rtextInput(\u0026quot;name\u0026quot;, \u0026quot;Enter your name:\u0026quot;),\rtextOutput(\u0026quot;r\u0026quot;)\r)\rserver \u0026lt;- function(input, output){\routput$r \u0026lt;- renderText({\rpaste0(\u0026quot;Do you prefer rain or sunshine,\u0026quot;, input$name, \u0026quot;?\u0026quot;)\r})\r}\rshinyApp(ui = ui, server = server)\r You did it a text that uses a text input!!\n","date":1613433600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613476784,"objectID":"d48e9255738189f53647a383b9494289","permalink":"https://victormandela.netlify.app/post/how-to-build-a-shinyapp/","publishdate":"2021-02-16T00:00:00Z","relpermalink":"/post/how-to-build-a-shinyapp/","section":"post","summary":"Building a \u0026ldquo;Hello world shinyApp\u0026rdquo; We begin to demonstrate the building blocks of a shinyApp.\nAn App needs a User interface (ui) and a server. The majic about the shiny package is that it can create both of this within R, plus run your app using an additionational shiny function.","tags":["Shiny Apps","Dashboards"],"title":"How to build a ShinyApp","type":"post"},{"authors":[],"categories":["R"],"content":"Most of the comments I get after sharing mock up and prototype shiny applications are:-\n I love this app How fast did you add this features!! This is exactly what I need in my daily job at the company.  Most of the people commenting, have never seen shiny applications before, know nothing about R and they don\u0026rsquo;t really care that its running at the back of the application.\nChallenges Faced by the developer.  The common problems I have faced are:-\n  Customizing user interface\n  Increasing the user experience part\n  Scaling\n  Scalable Applications Before we go into the remedies for this problems, I would first want us to understand the kinds of scaling there is:-\n  Vertical Scaling\n this is where we aim at ** increasing the amount of users for one machine**.    Horizontal scaling\n Scaling the application across multiple machines    Solutions to your Scaling Shiny dashboards Before we explain this are the main power points in brief:-\na) Leveraging front end\n Use Javascript to handle fast user interactions that do not change data.  b) Extract Computation\n Handle resource intensive operations away from the application. Using external source to do the computation will assist.  c) Set Architecture\n Prepare applications to be used by many users.  The Main aim is to make shiny layer thin. Shiny should be a thin layer between the data and the interface.\nUsing the power of the browser This is what you should do:-\n1). Render the input in ui.R and only update them in server.R.\n2). Run inline Javascript code with {Shinyjs} package.\n3). Set all actions in Javascript without server.R part.\nui \u0026lt;- fluidPage(\ractionButton(\r\u0026quot;Click_Button\u0026quot;,\rlabel = \u0026quot;I will update icon!\u0026quot;,\ronclick = \u0026quot;$('mjs_update \u0026gt; i').toggle class('fa-arrow-up');\u0026quot;\r)\r)\r Extract Computation: Remote API Creating a API has been made achievable by use of the plumber package.\n  Load only what is needed.\n The entire dataset is rarely needed in the application. Usually the first user action within the app is to filter/select a subset of data. First select them load.    Build Rest API\n Wrap data extraction login into a simple API with {Plumber} by adding special comments.    Deploy Easily\n Use Rstudio connect or Docker to host your API.    Extract computation: Using Database Many may ask, **Why use Data base?\u0026quot;\nui \u0026lt;- fluidPage(....)\rdata \u0026lt;- readRDS(\u0026quot;./1gb-file.rds\u0026quot;)\rServer \u0026lt;- function(input, output, session){\routput$search_result \u0026lt;- ... data %\u0026gt;% filter(value \u0026gt; input$query_value)\r}\rshinyApp(ui = ui, server = server)\r Because It reduces the amount of RAM used when you have many users. Its easy sinec you use the dplyr package to manipulate the database.\nSet Architecture When deploying in the shiny server open source, you can use Ansible to provision the infrastructure.\n","date":1610841600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1610883585,"objectID":"59664a29ca2b4e23f46d05c6d62ef7bd","permalink":"https://victormandela.netlify.app/post/how-to-scale-shiny-dashboards/","publishdate":"2021-01-17T00:00:00Z","relpermalink":"/post/how-to-scale-shiny-dashboards/","section":"post","summary":"Most of the comments I get after sharing mock up and prototype shiny applications are:-\n I love this app How fast did you add this features!! This is exactly what I need in my daily job at the company.","tags":["Academic"],"title":"How to Scale Shiny Dashboards","type":"post"},{"authors":[],"categories":"R","content":"\r\rInferential Statistics\n\rIf you have developed and deployed a Shiny app and would like to embed it in blogdown, follow these steps:\ncreate a new post as usual\radd runtime: shiny (and output: html_document if it is not already included) in the YAML metadata\rinsert the following HTML code in the body of the post:\r\r\u0026lt;iframe height=\u0026quot;800\u0026quot; width=\u0026quot;100%\u0026quot; frameborder=\u0026quot;no\u0026quot; src=\u0026quot;https://yourname.shinyapps.io/InferentialStatistics/\u0026quot;\u0026gt; \u0026lt;/iframe\u0026gt;\rYou should change the URL with the URL of your deployed Shiny app (after src=, do not forget that the URL should start with http:// or https:// and should be surrounded by \"). Moreover, you can modify the height, the width and include or not a frame border with the corresponding tags.\nHere is an example of the result with one of my Shiny app (link to the app):\n\r\nNote that the app may not work if it has hit the monthly usage limit. Try again later if that is the case.\nIf you encounter an issue, try loading the following packages in the body of your new post: shiny, widgetframe (you can load a package with the command library(widgetframe)). If one of the package is not installed yet, you can do it with the command install.packages(\"widgetframe\").\nI hope this article helped you to embed a Shiny app in your website.\nAs always, if you have a question or a suggestion related to the topic covered in this article, please add it as a comment so other readers can benefit from the discussion.\n","date":1610841600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1610914904,"objectID":"b229b2ce362397ebf2940eba097bcf06","permalink":"https://victormandela.netlify.app/project/inferential-statistics-dashboard/","publishdate":"2021-01-17T00:00:00Z","relpermalink":"/project/inferential-statistics-dashboard/","section":"project","summary":"Inferential Statistics\n\rIf you have developed and deployed a Shiny app and would like to embed it in blogdown, follow these steps:\ncreate a new post as usual\radd runtime: shiny (and output: html_document if it is not already included) in the YAML metadata\rinsert the following HTML code in the body of the post:\r\r\u0026lt;iframe height=\u0026quot;800\u0026quot; width=\u0026quot;100%\u0026quot; frameborder=\u0026quot;no\u0026quot; src=\u0026quot;https://yourname.","tags":["R Shiny Apps","Statistics"],"title":"Inferential Statistics Dashboard","type":"project"},{"authors":[],"categories":"R","content":"Data set: Animal Crossing user reviews from #TidyTuesday dataset\nTask: Sentimental Analysis - Using the text from User reviews predict user ratings.\nExpected results: To check how positive or negative the user review is based on their comments.\nExplore the data Let explore the data.\nWe can see columns of the usernames, their reviews on how they feel the game was, the rating score grade, and the date they posted the review.\nlibrary(tidyverse)\ruser_reviews \u0026lt;- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv')\ruser_reviews %\u0026gt;%\rcount(grade) %\u0026gt;%\rggplot(aes(grade, n)) +\rgeom_col(fill = \u0026quot;midnightblue\u0026quot;, alpha = 0.7)\r Lots of people give scores of zero, and lots of people give scores of 10. This does not look like a nice distribution for predicting a not-even-really-continuous quantity like this grade, so we\u0026rsquo;ll convert these user scores to a label, good vs. bad user reviews, and build a classification model.\n## not run here\ruser_reviews %\u0026gt;% filter(grade \u0026gt; 8) %\u0026gt;% sample_n(5) %\u0026gt;% pull(text)\r We definitely saw some evidence of scraping problems when looking at the review text. We will remove at least the final \u0026quot;Expand\u0026quot; from the reviews, and create a new categorical rating variable.\nreviews_parsed \u0026lt;- user_reviews %\u0026gt;%\rmutate(text = str_remove(text, \u0026quot;Expand$\u0026quot;)) %\u0026gt;%\rmutate(rating = case_when(grade \u0026gt; 7 ~ \u0026quot;good\u0026quot;,\rTRUE ~ \u0026quot;bad\u0026quot;))\r What is the distribution of words per review?\nlibrary(tidytext)\rwords_per_review \u0026lt;- reviews_parsed %\u0026gt;%\runnest_tokens(word, text) %\u0026gt;%\rcount(user_name, name = \u0026quot;total_words\u0026quot;)\rwords_per_review %\u0026gt;%\rggplot(aes(total_words)) +\rgeom_histogram(fill = \u0026quot;midnightblue\u0026quot;, alpha = 0.8)\r I don\u0026rsquo;t believe this can be a true, natural distribution of words per review. That sharp drop in the distribution looks very strange and I believe is a sign of some problem with the data generation process (i.e. a scraping problem). That\u0026rsquo;s life sometimes! Data is never perfect and sometimes we have to do the best we can with the data available. If this was my own project from start-to-finish, I would go back to the scraping and see if I could make any improvements at that stage.\nFor now, let\u0026rsquo;s forge ahead and see what we can learn. There are lots more great examples of #TidyTuesday EDA out there to explore, including more text mining!\nBuild a model We start by loading the tidymodels metapackage, that helps us in splitting our data into training and testing sets.\nlibrary(tidymodels)\rset.seed(123)\rreview_split \u0026lt;- initial_split(reviews_parsed, strata = rating)\rreview_train \u0026lt;- training(review_split)\rreview_test \u0026lt;- testing(review_split)\r Next, let\u0026rsquo;s preprocess our data to get it ready for modeling. We can use specialized steps from textrecipes, along with the general recipe steps.\nlibrary(textrecipes)\rlibrary(stopwords)\rreview_rec \u0026lt;- recipe(rating ~ text, data = review_train) %\u0026gt;%\rstep_tokenize(text) %\u0026gt;%\rtextrecipes::step_stopwords(text) %\u0026gt;%\rstep_tokenfilter(text, max_tokens = 500) %\u0026gt;%\rstep_tfidf(text) %\u0026gt;%\rstep_normalize(all_predictors())\rreview_prep \u0026lt;- prep(review_rec)\rreview_prep\r ## Data Recipe\r## ## Inputs:\r## ## role #variables\r## outcome 1\r## predictor 1\r## ## Training data contained 2250 data points and no missing data.\r## ## Operations:\r## ## Tokenization for text [trained]\r## Stop word removal for text [trained]\r## Text filtering for text [trained]\r## Term frequency-inverse document frequency with text [trained]\r## Centering and scaling for tfidf_text_0, tfidf_text_1, ... [trained]\r Let\u0026rsquo;s walk through the steps in this recipe, which are what I consider sensible defaults for a first attempt at training a text classification model such as a sentiment analysis model.\n First, we must tell the recipe() what our model is going to be (using a formula here) and what data we are using. Next, we tokenize our text, with the default tokenization into single words. Next, we remove stop words (again, just the default set). It wouldn\u0026rsquo;t be practical to keep all the tokens from this whole dataset in our model, so we can filter down to only keep, in this case, the top 500 most-used tokens (after removing stop words). This is a pretty dramatic cut and keeping more tokens would be a good next step in improving this model. We need to decide on some kind of weighting for these tokens next, either something like term frequency or, what we used here, tf-idf. Finally, we center and scale (i.e. normalize) all the newly created tf-idf values because the model we are going to use is sensitive to this.  Before using prep() these steps have been defined but not actually run or implemented. The prep() function is where everything gets evaluated.\nNow it\u0026rsquo;s time to specify our model. Here we can set up the model specification for lasso regression with penalty = tune() since we don\u0026rsquo;t yet know the best value for the regularization parameter and mixture = 1 for lasso. In my experience, the lasso has proved to be a good baseline for text modeling. (And sometimes it is hard to do much better!)\nI am using a workflow() in this example for convenience; these are objects that can help you manage modeling pipelines more easily, with pieces that fit together like Lego blocks. This workflow() contains both the recipe and the model.\nlasso_spec \u0026lt;- logistic_reg(penalty = tune(), mixture = 1) %\u0026gt;%\rset_engine(\u0026quot;glmnet\u0026quot;)\rlasso_wf \u0026lt;- workflow() %\u0026gt;%\radd_recipe(review_rec) %\u0026gt;%\radd_model(lasso_spec)\rlasso_wf\r ## == Workflow ====================================================================\r## Preprocessor: Recipe\r## Model: logistic_reg()\r## ## -- Preprocessor ----------------------------------------------------------------\r## 5 Recipe Steps\r## ## * step_tokenize()\r## * step_stopwords()\r## * step_tokenfilter()\r## * step_tfidf()\r## * step_normalize()\r## ## -- Model -----------------------------------------------------------------------\r## Logistic Regression Model Specification (classification)\r## ## Main Arguments:\r## penalty = tune()\r## mixture = 1\r## ## Computational engine: glmnet\r Tune model parameters Let\u0026rsquo;s get ready to tune the lasso model! First, we need a set of possible regularization parameters to try.\nlambda_grid \u0026lt;- grid_regular(penalty(), levels = 40)\r Next, we need a set of resampled data to fit and evaluate all these models.\nset.seed(123)\rreview_folds \u0026lt;- bootstraps(review_train, strata = rating)\rreview_folds\r ## # Bootstrap sampling using stratification ## # A tibble: 25 x 2\r## splits id ## \u0026lt;list\u0026gt; \u0026lt;chr\u0026gt; ## 1 \u0026lt;split [2.2K/812]\u0026gt; Bootstrap01\r## 2 \u0026lt;split [2.2K/850]\u0026gt; Bootstrap02\r## 3 \u0026lt;split [2.2K/814]\u0026gt; Bootstrap03\r## 4 \u0026lt;split [2.2K/814]\u0026gt; Bootstrap04\r## 5 \u0026lt;split [2.2K/853]\u0026gt; Bootstrap05\r## 6 \u0026lt;split [2.2K/840]\u0026gt; Bootstrap06\r## 7 \u0026lt;split [2.2K/816]\u0026gt; Bootstrap07\r## 8 \u0026lt;split [2.2K/826]\u0026gt; Bootstrap08\r## 9 \u0026lt;split [2.2K/804]\u0026gt; Bootstrap09\r## 10 \u0026lt;split [2.2K/809]\u0026gt; Bootstrap10\r## # ... with 15 more rows\r Now we can put it all together and implement the tuning. We can set specific metrics to compute during tuning with metric_set(). Let\u0026rsquo;s look at AUC, positive predictive value, and negative predictive value so we can understand if one class is harder to predict than another.\ndoParallel::registerDoParallel()\rset.seed(2020)\rlasso_grid \u0026lt;- tune_grid(\rlasso_wf,\rresamples = review_folds,\rgrid = lambda_grid,\rmetrics = metric_set(roc_auc, ppv, npv)\r)\r Once we have our tuning results, we can examine them in detail.\nlasso_grid %\u0026gt;%\rcollect_metrics()\r ## # A tibble: 120 x 7\r## penalty .metric .estimator mean n std_err .config ## \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 1.00e-10 npv binary 0.740 25 0.00518 Preprocessor1_Model01\r## 2 1.00e-10 ppv binary 0.864 25 0.00302 Preprocessor1_Model01\r## 3 1.00e-10 roc_auc binary 0.878 25 0.00276 Preprocessor1_Model01\r## 4 1.80e-10 npv binary 0.740 25 0.00518 Preprocessor1_Model02\r## 5 1.80e-10 ppv binary 0.864 25 0.00302 Preprocessor1_Model02\r## 6 1.80e-10 roc_auc binary 0.878 25 0.00276 Preprocessor1_Model02\r## 7 3.26e-10 npv binary 0.740 25 0.00518 Preprocessor1_Model03\r## 8 3.26e-10 ppv binary 0.864 25 0.00302 Preprocessor1_Model03\r## 9 3.26e-10 roc_auc binary 0.878 25 0.00276 Preprocessor1_Model03\r## 10 5.88e-10 npv binary 0.740 25 0.00518 Preprocessor1_Model04\r## # ... with 110 more rows\r Visualization is often more helpful to understand model performance.\nlasso_grid %\u0026gt;%\rcollect_metrics() %\u0026gt;%\rggplot(aes(penalty, mean, color = .metric)) +\rgeom_line(size = 1.5, show.legend = FALSE) +\rfacet_wrap(~.metric) +\rscale_x_log10()\r This shows us a lot. We see clearly that AUC and PPV have benefited from the regularization and we could identify the best value of penalty for each of those metrics. The same is not true for NPV. One class (the happy comments) is harder to predict than the other. It might be worth including more tokens in our model, based on this plot.\nChoose the final model Let\u0026rsquo;s keep our model as is for now, and choose a final model based on AUC. We can use select_best() to find the best AUC and then update our workflow lasso_wf with this value.\nbest_auc \u0026lt;- lasso_grid %\u0026gt;%\rselect_best(\u0026quot;roc_auc\u0026quot;)\rbest_auc\r ## # A tibble: 1 x 2\r## penalty .config ## \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 0.00889 Preprocessor1_Model32\r final_lasso \u0026lt;- finalize_workflow(lasso_wf, best_auc)\rfinal_lasso\r ## == Workflow ====================================================================\r## Preprocessor: Recipe\r## Model: logistic_reg()\r## ## -- Preprocessor ----------------------------------------------------------------\r## 5 Recipe Steps\r## ## * step_tokenize()\r## * step_stopwords()\r## * step_tokenfilter()\r## * step_tfidf()\r## * step_normalize()\r## ## -- Model -----------------------------------------------------------------------\r## Logistic Regression Model Specification (classification)\r## ## Main Arguments:\r## penalty = 0.00888623816274339\r## mixture = 1\r## ## Computational engine: glmnet\r This is our tuned, finalized workflow (but it is not fit yet). One of the things we can do when we start to fit this finalized workflow on the whole training set is to see what the most important variables are using the vip package.\nlibrary(vip)\rfinal_lasso %\u0026gt;%\rfit(review_train) %\u0026gt;%\rpull_workflow_fit() %\u0026gt;%\rvi(lambda = best_auc$penalty) %\u0026gt;%\rgroup_by(Sign) %\u0026gt;%\rtop_n(20, wt = abs(Importance)) %\u0026gt;%\rungroup() %\u0026gt;%\rmutate(Importance = abs(Importance),\rVariable = str_remove(Variable, \u0026quot;tfidf_text_\u0026quot;),\rVariable = fct_reorder(Variable, Importance)) %\u0026gt;%\rggplot(aes(x = Importance, y = Variable, fill = Sign)) +\rgeom_col(show.legend = FALSE) +\rfacet_wrap(~Sign, scales = \u0026quot;free_y\u0026quot;) +\rlabs(y = NULL)\r People who are happy with Animal Crossing like to talk about how relaxing, fantastic, enjoyable, and great it is, and also talk in their reviews about the \u0026ldquo;review bombing\u0026rdquo; of the negative reviews. Notice that many of the words from the negative reviews are specifically used to talk about the multiplayer experience (it\u0026rsquo;s boring for the second player, second player cannot do \u0026ldquo;anything\u0026rdquo; or move the story forward, cooperative/coop play doesn\u0026rsquo;t work well, etc). These users want a fix and they declare Nintendo greedy for the one-island-per-console play.\nFinally, let\u0026rsquo;s return to our test data. The tune package has a function last_fit() which is nice for situations when you have tuned and finalized a model or workflow and want to fit it one last time on your training data and evaluate it on your testing data. You only have to pass this function your finalized model/workflow and your split.\nreview_final \u0026lt;- last_fit(final_lasso, review_split)\rreview_final %\u0026gt;%\rcollect_metrics()\r ## # A tibble: 2 x 4\r## .metric .estimator .estimate .config ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 accuracy binary 0.892 Preprocessor1_Model1\r## 2 roc_auc binary 0.941 Preprocessor1_Model1\r We did not overfit during our tuning process, and the overall accuracy is not bad. Let\u0026rsquo;s create a confusion matrix for the testing data.\nreview_final %\u0026gt;%\rcollect_predictions() %\u0026gt;%\rconf_mat(rating, .pred_class)\r ## Truth\r## Prediction bad good\r## bad 449 55\r## good 26 219\r Although our overall accuracy isn\u0026rsquo;t so bad, we find that it is easier to detect the negative reviews than the positive ones.\n","date":1610841600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1610882086,"objectID":"4cdb1175a8b7302b58eab876b24beeab","permalink":"https://victormandela.netlify.app/post/sentiment-analysis/","publishdate":"2021-01-17T00:00:00Z","relpermalink":"/post/sentiment-analysis/","section":"post","summary":"Data set: Animal Crossing user reviews from #TidyTuesday dataset\nTask: Sentimental Analysis - Using the text from User reviews predict user ratings.\nExpected results: To check how positive or negative the user review is based on their comments.","tags":"Deep Learning","title":"Sentiment analysis","type":"post"},{"authors":["Victor Mandela"],"categories":null,"content":"\rCreate your slides in Markdown - click the Slides button to check out the example.\r\r\rSupplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://victormandela.netlify.app/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot;\rif porridge == \u0026quot;blueberry\u0026quot;:\rprint(\u0026quot;Eating...\u0026quot;)\r  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}}\r{{% fragment %}} **Two** {{% /fragment %}}\r{{% fragment %}} Three {{% /fragment %}}\r Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}}\r- Only the speaker can read these notes\r- Press `S` key to view\r{{% /speaker_note %}}\r Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}}\r{{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}}\r{{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}\r  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1,\r.reveal section h2,\r.reveal section h3 {\rcolor: navy;\r}\r  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://victormandela.netlify.app/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Victor Mandela","Robert Ford"],"categories":null,"content":"\rClick the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.\r\r\r\rCreate your slides in Markdown - click the Slides button to check out the example.\r\r\rSupplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://victormandela.netlify.app/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Victor Mandela","Robert Ford"],"categories":null,"content":"\rClick the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.\r\r\r\rCreate your slides in Markdown - click the Slides button to check out the example.\r\r\rSupplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://victormandela.netlify.app/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"},{"authors":["Victor Mandela","Robert Ford"],"categories":null,"content":"\rClick the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.\r\r\r\rCreate your slides in Markdown - click the Slides button to check out the example.\r\r\rSupplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://victormandela.netlify.app/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]